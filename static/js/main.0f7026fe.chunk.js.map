{"version":3,"sources":["Cmachine.js","store/actions.js","store/actionsTypes.js","store/reducer.js","App.js","serviceWorker.js","index.js"],"names":["Cmachine","props","randomGenerator","randomNum","Math","floor","random","setState","randomNumber","shreddingMoney","moneyEntered","machine5bam","machine2bam","machine1bam","machine50pf","machine20pf","machine10pf","onSetCoinsMachine5bam","onSetCoinsMachine2bam","onSetCoinsMachine1bam","onSetCoinsMachine50pf","onSetCoinsMachine20pf","onSetCoinsMachine10pf","change5bam","change2bam","change1bam","change50pf","change20pf","change10pf","paymentSuccessfull","noXcoinsInTheMachine","notEnoughMachineCoins","tooSmallEnteredpayment","coins","machineCoins","machineCoinsNames","changeCoinsNames","backMoney","toFixed","backMoneyInfo","sumCoinsInMachine","forEach","element","index","numberOfCoins","parseInt","restInMachine","keyChangeCoin","temp","xCoin","state","restMoney","sumMachineCoins","sumChangeCoins","this","onSetRandomNumber","onSetInputNumber","money","isMachineEmpty","className","type","class","onClick","placeholder","onChange","event","inputNum","target","value","Component","connect","dispatch","payload","setInputNumber","setCoinsMachine5bam","setCoinsMachine2bam","setCoinsMachine1bam","setCoinsMachine50pf","setCoinsMachine20pf","setCoinsMachine10pf","updateObject","oldObject","updatedProperties","initialState","setRandomNumber","action","reducer","store","createStore","rootReducer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0f7026fe.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  setRandomNumber,\r\n  setInputNumber,\r\n  setCoinsMachine5bam,\r\n  setCoinsMachine2bam,\r\n  setCoinsMachine1bam,\r\n  setCoinsMachine50pf,\r\n  setCoinsMachine20pf,\r\n  setCoinsMachine10pf,\r\n} from \"./store/actions\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass Cmachine extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      backMoneyInfo: 0,\r\n      randomNumber: 1,\r\n      change5bam: 0,\r\n      change2bam: 0,\r\n      change1bam: 0,\r\n      change50pf: 0,\r\n      change20pf: 0,\r\n      change10pf: 0,\r\n      restMoney: 1,\r\n      sumMachineCoins: 0,\r\n      sumChangeCoins: 0,\r\n      paymentSuccessfull:false,\r\n      noXcoinsInTheMachine:false,\r\n      notEnoughMachineCoins:false,\r\n      tooSmallEnteredpayment:false,\r\n      xCoin:0,\r\n    };\r\n  }\r\n\r\n  randomGenerator = () => {\r\n    const randomNum =\r\n      Math.floor(Math.random() * 100) + 1 + Math.floor(Math.random() * 10) / 10;\r\n    this.setState({ randomNumber: randomNum });\r\n  };\r\n\r\n  shreddingMoney = () => {\r\n    const {\r\n      randomNumber,\r\n      moneyEntered,\r\n      machine5bam,\r\n      machine2bam,\r\n      machine1bam,\r\n      machine50pf,\r\n      machine20pf,\r\n      machine10pf,\r\n      onSetCoinsMachine5bam,\r\n      onSetCoinsMachine2bam,\r\n      onSetCoinsMachine1bam,\r\n      onSetCoinsMachine50pf,\r\n      onSetCoinsMachine20pf,\r\n      onSetCoinsMachine10pf,\r\n    } = this.props;\r\n\r\n    this.setState({\r\n      change5bam: 0,\r\n      change2bam: 0,\r\n      change1bam: 0,\r\n      change50pf: 0,\r\n      change20pf: 0,\r\n      change10pf: 0,\r\n      paymentSuccessfull:false,\r\n      noXcoinsInTheMachine:false,\r\n      notEnoughMachineCoins:false,\r\n      tooSmallEnteredpayment:false,\r\n    });\r\n\r\n\r\n    let coins = [5, 2, 1, 0.5, 0.2, 0.1];\r\n\r\n    let machineCoins = [\r\n      machine5bam,\r\n      machine2bam,\r\n      machine1bam,\r\n      machine50pf,\r\n      machine20pf,\r\n      machine10pf,\r\n    ];\r\n\r\n    const machineCoinsNames = [\r\n      \"machine5bam\",\r\n      \"machine2bam\",\r\n      \"machine1bam\",\r\n      \"machine50pf\",\r\n      \"machine20pf\",\r\n      \"machine10pf\",\r\n    ];\r\n\r\n    const changeCoinsNames = [\r\n      \"change5bam\",\r\n      \"change2bam\",\r\n      \"change1bam\",\r\n      \"change50pf\",\r\n      \"change20pf\",\r\n      \"change10pf\",\r\n    ];\r\n\r\n    let backMoney = (moneyEntered - randomNumber).toFixed(1);\r\n    this.setState({backMoneyInfo:backMoney});\r\n\r\n    // check payment \r\n    if(moneyEntered<randomNumber)\r\n    {\r\n      this.setState({tooSmallEnteredpayment:true});\r\n    }\r\n\r\n    let sumCoinsInMachine = 0;\r\n\r\n    // machine state checking\r\n    machineCoins.forEach((element, index) => {\r\n      sumCoinsInMachine += element * coins[index];\r\n    });\r\n    if (sumCoinsInMachine < backMoney) {\r\n      backMoney = 0;\r\n      this.setState({notEnoughMachineCoins:true});\r\n    }\r\n  \r\n\r\n    // calculating\r\n    coins.forEach((element, index) => {\r\n      if (backMoney >= element) {\r\n        let numberOfCoins = backMoney / element;\r\n\r\n        if (numberOfCoins > machineCoins[index]) {\r\n          numberOfCoins = machineCoins[index];\r\n        }\r\n        numberOfCoins = parseInt(numberOfCoins);\r\n        backMoney = (backMoney - numberOfCoins * element).toFixed(1);\r\n\r\n        // placing to local state\r\n        let restInMachine = machineCoins[index] - numberOfCoins;\r\n        let keyChangeCoin = changeCoinsNames[index];\r\n        this.setState({ [keyChangeCoin]: numberOfCoins });\r\n\r\n        // ckeck: not enough X coins - payment not successfull\r\n        if (machineCoins[index] == 0) {\r\n          changeCoinsNames.forEach((element,index) => {\r\n            this.setState({ [element]: 0});\r\n            // placing to redux-state\r\n            switch (machineCoinsNames[index]) {\r\n              case \"machine5bam\":\r\n                onSetCoinsMachine5bam({ machine5bam: machine5bam });\r\n                break;\r\n              case \"machine2bam\":\r\n                onSetCoinsMachine2bam({ machine2bam: machine2bam });\r\n                break;\r\n              case \"machine1bam\":\r\n                onSetCoinsMachine1bam({ machine1bam: machine1bam });\r\n                break;\r\n              case \"machine50pf\":\r\n                onSetCoinsMachine50pf({ machine50pf: machine50pf });\r\n                break;\r\n              case \"machine20pf\":\r\n                onSetCoinsMachine20pf({ machine20pf: machine20pf });\r\n                break;\r\n              case \"machine10pf\":\r\n                onSetCoinsMachine10pf({ machine10pf: machine10pf });\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          });\r\n          // ckeck: machine state of X coins\r\n          const temp=coins[index];\r\n          this.setState({noXcoinsInTheMachine:true,xCoin:temp});\r\n        }\r\n\r\n\r\n        // placing to redux-state\r\n        switch (machineCoinsNames[index]) {\r\n          case \"machine5bam\":\r\n            onSetCoinsMachine5bam({ machine5bam: restInMachine });\r\n            break;\r\n          case \"machine2bam\":\r\n            onSetCoinsMachine2bam({ machine2bam: restInMachine });\r\n            break;\r\n          case \"machine1bam\":\r\n            onSetCoinsMachine1bam({ machine1bam: restInMachine });\r\n            break;\r\n          case \"machine50pf\":\r\n            onSetCoinsMachine50pf({ machine50pf: restInMachine });\r\n            break;\r\n          case \"machine20pf\":\r\n            onSetCoinsMachine20pf({ machine20pf: restInMachine });\r\n            break;\r\n          case \"machine10pf\":\r\n            onSetCoinsMachine10pf({ machine10pf: restInMachine });\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      randomNumber,\r\n      onSetRandomNumber,\r\n      onSetInputNumber,\r\n      machine5bam,\r\n      machine1bam,\r\n      machine2bam,\r\n      machine50pf,\r\n      machine20pf,\r\n      machine10pf,\r\n    } = this.props;\r\n    const {\r\n      money,\r\n      change5bam,\r\n      change2bam,\r\n      change1bam,\r\n      change50pf,\r\n      change20pf,\r\n      change10pf,\r\n      backMoneyInfo,\r\n      noXcoinsInTheMachine,\r\n      notEnoughMachineCoins,\r\n      tooSmallEnteredpayment,\r\n      xCoin,\r\n    } = this.state;\r\n\r\n    const isMachineEmpty =\r\n      machine5bam === 0 &&\r\n      machine2bam === 0 &&\r\n      machine1bam === 0 &&\r\n      machine50pf === 0 &&\r\n      machine20pf === 0 &&\r\n      machine10pf === 0;\r\n    const paymentSuccessfull= (change5bam+change2bam+change1bam+change50pf+change20pf+change10pf)!=0;\r\n\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"Random\">\r\n          <button\r\n            type=\"button\"\r\n            class=\"btn btn-primary\"\r\n            onClick={onSetRandomNumber}\r\n          >\r\n            Generate randon payment\r\n          </button>\r\n          <p>{randomNumber}</p>\r\n        </div>\r\n\r\n        <div>\r\n          <input\r\n            placeholder=\"BAM\"\r\n            type=\"number\"\r\n            onChange={(event) =>\r\n              onSetInputNumber({ inputNum: event.target.value })\r\n            }\r\n            value={money}\r\n          ></input>\r\n          <p>Enter amount and click to pay</p>\r\n        </div>\r\n\r\n        <div className=\"Shredd\">\r\n          <button\r\n            type=\"button\"\r\n            class=\"btn btn-info\"\r\n            onClick={this.shreddingMoney}\r\n          >\r\n            Confrim and pay\r\n          </button>\r\n          \r\n            {notEnoughMachineCoins && (<p className=\"text-danger\"> not enough coins in the machine, try to pay less</p>)}\r\n        \r\n            {isMachineEmpty && (<p className=\"text-danger\">The machine is empty</p>)}\r\n    \r\n            {tooSmallEnteredpayment && (<p className=\"text-danger\"> entered amount  is too small</p>)}\r\n          \r\n            {paymentSuccessfull && (<p className=\"text-success\">successfull :<br/>{backMoneyInfo}</p>)}\r\n          \r\n            {noXcoinsInTheMachine && (<p className=\"text-info\">there are no more {xCoin} coins in the machine</p>)}\r\n  \r\n        </div>\r\n        <div class=\"container\">\r\n        <div class=\"row\">\r\n            <div class=\"col\">BAM</div>\r\n      <div class=\"col\">CHANGE</div>\r\n      <div class=\"col\">MACHINE STATE</div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col\">5 </div>\r\n      <div class=\"col\">x {change5bam}</div>\r\n      <div class=\"col\">{machine5bam}</div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col\">2 </div>\r\n      <div class=\"col\">x {change2bam}</div>\r\n            <div class=\"col\">{machine2bam}</div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col\">1 </div>\r\n      <div class=\"col\">x {change1bam}</div>\r\n      <div class=\"col\">{machine1bam}</div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col\">0.5</div>\r\n      <div class=\"col\">x {change50pf}</div>\r\n      <div class=\"col\">{machine50pf}</div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col\">0.2</div>\r\n      <div class=\"col\">x {change20pf}</div>\r\n      <div class=\"col\">{machine20pf}</div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col\">0.1</div>\r\n      <div class=\"col\">x {change10pf}</div>\r\n      <div class=\"col\">{machine10pf}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n  randomNumber: state.randomNumber,\r\n  moneyEntered: state.moneyEntered,\r\n\r\n  machine5bam: state.machine5bam,\r\n  machine2bam: state.machine2bam,\r\n  machine1bam: state.machine1bam,\r\n  machine50pf: state.machine50pf,\r\n  machine20pf: state.machine20pf,\r\n  machine10pf: state.machine10pf,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onSetRandomNumber: (payload) => dispatch(setRandomNumber(payload)),\r\n  onSetInputNumber: (payload) => dispatch(setInputNumber(payload)),\r\n  onSetCoinsMachine5bam: (payload) => dispatch(setCoinsMachine5bam(payload)),\r\n  onSetCoinsMachine2bam: (payload) => dispatch(setCoinsMachine2bam(payload)),\r\n  onSetCoinsMachine1bam: (payload) => dispatch(setCoinsMachine1bam(payload)),\r\n  onSetCoinsMachine50pf: (payload) => dispatch(setCoinsMachine50pf(payload)),\r\n  onSetCoinsMachine20pf: (payload) => dispatch(setCoinsMachine20pf(payload)),\r\n  onSetCoinsMachine10pf: (payload) => dispatch(setCoinsMachine10pf(payload)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Cmachine);\r\n","import * as actionTypes from './actionsTypes'\r\n\r\n\r\nexport const setRandomNumber = () => {\r\n    const randomNumber = Math.floor(Math.random() * 100) + 1 + Math.floor(Math.random() * 10) / 10;\r\n    return {\r\n      randomNumber: randomNumber,\r\n      type: actionTypes.SET_RANDOM_NUMBER,\r\n    }\r\n  };\r\n\r\nexport const setInputNumber = (payload) => {\r\n    const {inputNum} =payload\r\n\r\n    return {\r\n      moneyEntered: inputNum,\r\n      type: actionTypes.SET_INPUT_NUMBER,\r\n    }\r\n};\r\n\r\nexport const setCoinsMachine5bam = (payload) => {\r\n  const {machine5bam}=payload\r\n  return {\r\n    machine5bam: machine5bam,\r\n    type: actionTypes.SET_COINS_MACHINE_5BAM,\r\n  }\r\n\r\n};\r\n\r\nexport const setCoinsMachine2bam = (payload) => {\r\n  const {machine2bam}=payload\r\n  return {\r\n    machine2bam: machine2bam,\r\n    type: actionTypes.SET_COINS_MACHINE_2BAM,\r\n  }\r\n\r\n};\r\n\r\nexport const setCoinsMachine1bam = (payload) => {\r\n  const {machine1bam}=payload\r\n  return {\r\n    machine1bam: machine1bam,\r\n    type: actionTypes.SET_COINS_MACHINE_1BAM,\r\n  }\r\n\r\n};\r\n\r\nexport const setCoinsMachine50pf = (payload) => {\r\n  const {machine50pf}=payload\r\n  return {\r\n    machine50pf: machine50pf,\r\n    type: actionTypes.SET_COINS_MACHINE_50PF,\r\n  }\r\n\r\n};\r\nexport const setCoinsMachine20pf = (payload) => {\r\n  const {machine20pf}=payload\r\n  return {\r\n    machine20pf: machine20pf,\r\n    type: actionTypes.SET_COINS_MACHINE_20PF,\r\n  }\r\n\r\n};\r\n\r\nexport const setCoinsMachine10pf = (payload) => {\r\n  const {machine10pf}=payload\r\n  return {\r\n    machine10pf: machine10pf,\r\n    type: actionTypes.SET_COINS_MACHINE_10PF,\r\n  }\r\n\r\n};\r\n","\r\nexport const SET_RANDOM_NUMBER = 'SET_RANDOM_NUMBER'\r\nexport const SET_INPUT_NUMBER = 'SET_INPUT_NUMBER'\r\nexport const SET_COINS_MACHINE_5BAM = 'SET_COINS_MACHINE_5BAM'\r\nexport const SET_COINS_MACHINE_2BAM = 'SET_COINS_MACHINE_2BAM'\r\nexport const SET_COINS_MACHINE_1BAM = 'SET_COINS_MACHINE_1BAM'\r\nexport const SET_COINS_MACHINE_50PF = 'SET_COINS_MACHINE_50PF'\r\nexport const SET_COINS_MACHINE_20PF = 'SET_COINS_MACHINE_20PF'\r\nexport const SET_COINS_MACHINE_10PF = 'SET_COINS_MACHINE_10PF'\r\n\r\n\r\n\r\n\r\n\r\n","import * as actionTypes from \"./actionsTypes\";\r\n\r\nconst updateObject = (oldObject, updatedProperties) => {\r\n  return {\r\n    ...oldObject,\r\n    ...updatedProperties,\r\n  };\r\n};\r\n\r\nconst initialState = {\r\n  randomNumber: 0,\r\n  moneyEntered: 0,\r\n  machine5bam: 50,\r\n  machine2bam: 50,\r\n  machine1bam: 50,\r\n  machine50pf: 50,\r\n  machine20pf: 50,\r\n  machine10pf: 50,\r\n     \r\n};\r\n\r\nconst setRandomNumber = (state, action) => {\r\n  return updateObject(state, { randomNumber: action.randomNumber });\r\n};\r\n\r\nconst setInputNumber = (state, action) => {\r\n  return updateObject(state, { moneyEntered: action.moneyEntered });\r\n};\r\n\r\nconst setCoinsMachine5bam = (state, action) => {\r\n  return updateObject(state, {machine5bam: action.machine5bam});\r\n};\r\n\r\nconst setCoinsMachine2bam = (state, action) => {\r\n  return updateObject(state, {machine2bam: action.machine2bam});\r\n};\r\n\r\nconst setCoinsMachine1bam = (state, action) => {\r\n  return updateObject(state, {machine1bam: action.machine1bam});\r\n};\r\nconst setCoinsMachine50pf = (state, action) => {\r\n  return updateObject(state, {machine50pf: action.machine50pf});\r\n};\r\n\r\nconst setCoinsMachine20pf = (state, action) => {\r\n  return updateObject(state, {machine20pf: action.machine20pf});\r\n};\r\n\r\n\r\nconst setCoinsMachine10pf = (state, action) => {\r\n  return updateObject(state, {machine10pf: action.machine10pf});\r\n    };\r\n  \r\n\r\n\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.SET_RANDOM_NUMBER:\r\n      return setRandomNumber(state, action);\r\n    case actionTypes.SET_INPUT_NUMBER:\r\n      return setInputNumber(state, action);\r\n    case actionTypes.SET_COINS_MACHINE_5BAM:\r\n      return setCoinsMachine5bam(state, action);\r\n    case actionTypes.SET_COINS_MACHINE_2BAM:\r\n      return setCoinsMachine2bam(state, action);\r\n    case actionTypes.SET_COINS_MACHINE_1BAM:\r\n      return setCoinsMachine1bam(state, action);\r\n    case actionTypes.SET_COINS_MACHINE_50PF:\r\n      return setCoinsMachine50pf(state, action);\r\n    case actionTypes.SET_COINS_MACHINE_20PF:\r\n      return setCoinsMachine20pf(state, action);\r\n    case actionTypes.SET_COINS_MACHINE_10PF:\r\n      return setCoinsMachine10pf(state, action);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import React from 'react';\nimport './App.css';\nimport Cmachine from './Cmachine';\nimport ReactDOM from 'react-dom'\n\nimport { Provider } from 'react-redux'\nimport {createStore} from 'redux'\nimport rootReducer from './store/reducer.js'\n\nconst store=createStore(rootReducer)\n\n\n\nfunction App() {\n  return (\n    <Provider store={store}>\n    <div className=\"App\">\n     <Cmachine>\n\n     </Cmachine>\n     </div>\n     </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}